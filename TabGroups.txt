using Fastedit2.Controls;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Reflection.PortableExecutable;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;

namespace Fastedit2.Tab
{
    public class TabPageComparer : TabViewItem
    {
        public TabPageItem Tab1 { get; private set; }
        public TabPageItem Tab2 { get; private set; }

        public int Tab1Index { get; private set; }
        public int Tab2Index { get; private set; }

        public void ShowComparedView(TabView tabView, TabPageItem tab1, TabPageItem tab2)
        {
            //Current tabpage is already a compare page
            if (tabView.SelectedItem is TabPageComparer)
                return;

            //save a reference to the tabitems to add them back later
            Tab1 = tab1;
            Tab2 = tab2;

            //Apply the group to the databaseitem
            Tab1.DatabaseItem.GroupedWithTab = Tab2.DatabaseItem.Identifier;
            Tab2.DatabaseItem.GroupedWithTab = "";

            //store the current index
            Tab1Index = tabView.TabItems.IndexOf(tab1);
            Tab2Index = tabView.TabItems.IndexOf(tab2);

            //remove the textbox from the tab
            tab1.Content = null;
            tab2.Content = null;

            tab1.textbox.GotFocus += Textbox_GotFocus;
            tab2.textbox.GotFocus += Textbox_GotFocus;

            //listen to updated in the tab title to update the compared tab too
            Tab1.TabPageHeaderChanged += Tab_TabPageHeaderChanged;
            Tab2.TabPageHeaderChanged += Tab_TabPageHeaderChanged;

            //remove the tabs from the tabcontrol
            tabView.TabItems.Remove(tab1);
            tabView.TabItems.Remove(tab2);

            //Add an instance of a comparedView control
            ComparedView comparedView = new ComparedView(tab1, tab2);

            //update the current tab page:
            this.Content = comparedView;
            UpdateHeader();

            //add the tab page
            tabView.TabItems.Add(this);
        }

        public async void HideComparedView(TabView tabView)
        {
            //remove content from the compare page
            var comparedView = this.Content as ComparedView;
            comparedView.RemoveItems(Tab1, Tab2);

            //remove the group from the databaseitem
            Tab2.DatabaseItem.GroupedWithTab = Tab1.DatabaseItem.GroupedWithTab = null;

            //remove the event from the textbox
            Tab1.textbox.GotFocus -= Textbox_GotFocus;
            Tab2.textbox.GotFocus -= Textbox_GotFocus;
            Tab1.TabPageHeaderChanged += Tab_TabPageHeaderChanged;
            Tab2.TabPageHeaderChanged += Tab_TabPageHeaderChanged;

            //add the textbox back to the tab
            Tab1.Content = Tab1.textbox;
            Tab2.Content = Tab2.textbox;

            //Add the old tabs back
            if (Tab1Index < tabView.TabItems.Count - 1 && Tab1Index != -1)
                tabView.TabItems.Insert(Tab1Index, Tab1);
            else
                tabView.TabItems.Add(Tab1);
            tabView.SelectedItem = Tab1;

            //delay otherwise textbox will be displayed weird
            await Task.Delay(1);

            if (Tab2Index < tabView.TabItems.Count - 1 && Tab2Index != -1)
                tabView.TabItems.Insert(Tab2Index, Tab2);
            else
                tabView.TabItems.Add(Tab2);
            tabView.SelectedItem = Tab2;
     
            //remove the compare page from the tabView
            tabView.TabItems.Remove(this);
        }
        public void UpdateHeader()
        {
            this.Header = Tab1.Header + " - " + Tab2.Header;
        }

        private void Tab_TabPageHeaderChanged(string header)
        {
            UpdateHeader();
        }
        //Handle the focus for the current textbox
        private void Textbox_GotFocus(TextControlBox.TextControlBox sender)
        {
            FocusedTab = sender.Tag as TabPageItem;

            //Update the tabChanged event:
            TabPageHelper.mainPage.SelectedTabChanged();
        }
        public TabPageItem FocusedTab { get; private set; }



        //static calls
        public static void Compare(TabView tabView, TabPageItem tab1, TabPageItem tab2)
        {
            new TabPageComparer().ShowComparedView(tabView, tab1, tab2);
        }
    }
}














<UserControl
    x:Class="Fastedit2.Controls.ComparedView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Fastedit2.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="300"
    d:DesignWidth="400">

    <Grid x:Name="mainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
    </Grid>
</UserControl>


using Fastedit2.Tab;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

// The User Control item template is documented at https://go.microsoft.com/fwlink/?LinkId=234236

namespace Fastedit2.Controls
{
    public sealed partial class ComparedView : UserControl
    {
        public ComparedView(TabPageItem tab1, TabPageItem tab2)
        {
            this.InitializeComponent();

            Grid.SetColumn(tab1.textbox, 0);
            Grid.SetColumn(tab2.textbox, 1);

            mainGrid.Children.Add(tab1.textbox);
            mainGrid.Children.Add(tab2.textbox);
        }

        public void RemoveItems(TabPageItem tab1, TabPageItem tab2)
        {
            Grid.SetColumn(tab1.textbox, 0);
            Grid.SetColumn(tab2.textbox, 0);

            mainGrid.Children.Clear();
        }
    }
}
